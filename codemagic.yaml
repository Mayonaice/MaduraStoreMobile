workflows:
  android-workflow:
    name: Android Build
    max_build_duration: 120
    instance_type: mac_mini_m1
    environment:
      flutter: stable
    scripts:
      - name: Set up local.properties
        script: |
          echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
      - name: Fix gradle wrapper
        script: |
          cd android
          cat > gradle/wrapper/gradle-wrapper.properties << EOF
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          distributionUrl=https\\://services.gradle.org/distributions/gradle-8.4-all.zip
          EOF
          chmod +x gradlew
      - name: Fix gradle.properties
        script: |
          cd android
          sed -i '' 's/android.nonTransitiveRClass=true /android.nonTransitiveRClass=true/g' gradle.properties
      - name: Fix build.gradle dependencies
        script: |
          cd android/app
          sed -i '' 's/androidx.core:androidx-core:1.7.0/androidx.core:core:1.7.0/g' build.gradle
      - name: Fix network security config
        script: |
          mkdir -p android/app/src/main/res/xml
          cat > android/app/src/main/res/xml/network_security_config.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <network-security-config>
              <base-config cleartextTrafficPermitted="true">
                  <trust-anchors>
                      <certificates src="system" />
                  </trust-anchors>
              </base-config>
              <domain-config cleartextTrafficPermitted="true">
                  <domain includeSubdomains="true">localhost</domain>
                  <domain includeSubdomains="true">10.0.2.2</domain>
                  <domain includeSubdomains="true">penantian-001-site1.qtempurl.com</domain>
              </domain-config>
          </network-security-config>
          EOF
      - name: Fix web_cors.dart
        script: |
          cat > lib/services/web_cors.dart << 'EOF'
          import 'dart:convert';
          import 'package:http/http.dart' as http;
          import 'dart:developer' as developer;
          import 'dart:async';

          /// Helper class untuk menangani permintaan HTTP di Flutter Web
          /// dengan mengatasi masalah CORS
          class WebCorsClient {
            static const Duration timeoutDuration = Duration(seconds: 30);
            static const bool _useJsonp = false; // JSONP tidak digunakan untuk URL baru
            static const String _apiBaseUrl = 'http://penantian-001-site1.qtempurl.com';
            
            /// Mengecek apakah browser adalah Microsoft Edge
            static bool isEdgeBrowser() {
              return false;
            }
            
            /// Mendapatkan origin URL untuk header
            static String getOrigin() {
              return 'http://localhost';
            }
            
            /// Memperbaiki URL .ashx menggunakan fungsi JavaScript
            static String fixAshxUrl(String url) {
              developer.log('URL sebelum diperbaiki: $url', name: 'WEB_CORS');
              return url;
            }
            
            /// Menambahkan proxy CORS jika diperlukan
            static String buildUrl(String url) {
              // Preservasi query string
              String baseUrl = url;
              String queryString = '';
              
              if (url.contains('?')) {
                final parts = url.split('?');
                baseUrl = parts[0];
                queryString = parts.length > 1 ? '?${parts[1]}' : '';
              }
              
              // Perbaiki URL untuk handler .ashx
              baseUrl = fixAshxUrl(baseUrl);
              
              // Gabungkan kembali dengan query string
              url = baseUrl + queryString;
              
              developer.log('URL akhir: $url', name: 'WEB_CORS');
              
              // Jika URL sudah mengarah ke production server, gunakan langsung
              if (url.startsWith(_apiBaseUrl)) {
                return url;
              }
              
              // Tanpa proxy untuk API production
              return url;
            }
            
            /// Test connection untuk URL tertentu
            static Future<Map<String, dynamic>> testConnection(String url) async {
              try {
                final response = await get(url);
                
                if (response.statusCode >= 200 && response.statusCode < 300) {
                  try {
                    return json.decode(response.body);
                  } catch (e) {
                    return {
                      'success': false,
                      'message': 'Error parsing response: ${e.toString()}'
                    };
                  }
                } else {
                  return {
                    'success': false,
                    'message': 'HTTP Error: ${response.statusCode}'
                  };
                }
              } catch (e) {
                return {
                  'success': false,
                  'message': 'Connection error: ${e.toString()}'
                };
              }
            }
            
            /// GET request dengan penanganan CORS
            static Future<http.Response> get(String url, {Map<String, String>? headers}) async {
              final targetUrl = buildUrl(url);
              developer.log('CORS GET: $targetUrl', name: 'WEB_CORS');
              
              // Headers yang sesuai untuk mengatasi masalah CORS
              final Map<String, String> fullHeaders = {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'X-Requested-With': 'XMLHttpRequest',
                'Origin': 'http://localhost',
                if (headers != null) ...headers,
              };
              
              try {
                final response = await http.get(
                  Uri.parse(targetUrl),
                  headers: fullHeaders,
                ).timeout(timeoutDuration);
                
                developer.log('Response Status: ${response.statusCode}', name: 'WEB_CORS');
                return response;
              } catch (e) {
                developer.log('CORS Error: $e', name: 'WEB_CORS');
                rethrow;
              }
            }

            /// POST request dengan penanganan CORS
            static Future<http.Response> post(String url, {Map<String, String>? headers, Object? body}) async {
              final targetUrl = buildUrl(url);
              developer.log('CORS POST: $targetUrl', name: 'WEB_CORS');
              
              // Headers yang sesuai untuk mengatasi masalah CORS
              final Map<String, String> fullHeaders = {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'X-Requested-With': 'XMLHttpRequest',
                'Origin': 'http://localhost',
                if (headers != null) ...headers,
              };
              
              try {
                developer.log('POST Headers: $fullHeaders', name: 'WEB_CORS');
                developer.log('POST Body: $body', name: 'WEB_CORS');
                
                final response = await http.post(
                  Uri.parse(targetUrl),
                  headers: fullHeaders,
                  body: body,
                ).timeout(timeoutDuration);
                
                developer.log('Response Status: ${response.statusCode}', name: 'WEB_CORS');
                developer.log('Response Body: ${response.body}', name: 'WEB_CORS');
                return response;
              } catch (e) {
                developer.log('CORS Error: $e', name: 'WEB_CORS');
                rethrow;
              }
            }

            /// PUT request dengan penanganan CORS
            static Future<http.Response> put(String url, {Map<String, String>? headers, Object? body}) async {
              final targetUrl = buildUrl(url);
              developer.log('CORS PUT: $targetUrl', name: 'WEB_CORS');
              
              // Headers yang sesuai untuk mengatasi masalah CORS
              final Map<String, String> fullHeaders = {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'X-Requested-With': 'XMLHttpRequest',
                'Origin': 'http://localhost',
                if (headers != null) ...headers,
              };
              
              try {
                final response = await http.put(
                  Uri.parse(targetUrl),
                  headers: fullHeaders,
                  body: body,
                ).timeout(timeoutDuration);
                
                developer.log('Response Status: ${response.statusCode}', name: 'WEB_CORS');
                return response;
              } catch (e) {
                developer.log('CORS Error: $e', name: 'WEB_CORS');
                rethrow;
              }
            }
            
            /// DELETE request dengan penanganan CORS
            static Future<http.Response> delete(String url, {Map<String, String>? headers}) async {
              final targetUrl = buildUrl(url);
              developer.log('CORS DELETE: $targetUrl', name: 'WEB_CORS');
              
              // Headers yang sesuai untuk mengatasi masalah CORS
              final Map<String, String> fullHeaders = {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'X-Requested-With': 'XMLHttpRequest',
                'Origin': 'http://localhost',
                if (headers != null) ...headers,
              };
              
              try {
                final response = await http.delete(
                  Uri.parse(targetUrl),
                  headers: fullHeaders,
                ).timeout(timeoutDuration);
                
                developer.log('Response Status: ${response.statusCode}', name: 'WEB_CORS');
                return response;
              } catch (e) {
                developer.log('CORS Error: $e', name: 'WEB_CORS');
                rethrow;
              }
            }
            
            /// Mendapatkan URL lokasi saat ini
            static String get location => '';
            
            /// Mendapatkan origin URL saat ini
            static String get origin => '';
          }
          EOF
      - name: Update repositories in build.gradle
        script: |
          cd android
          cat > build.gradle << 'EOF'
          allprojects {
              repositories {
                  google()
                  mavenCentral()
                  maven { url 'https://jitpack.io' }
              }
          }

          rootProject.buildDir = '../build'
          subprojects {
              project.buildDir = "${rootProject.buildDir}/${project.name}"
          }
          subprojects {
              project.evaluationDependsOn(':app')
          }

          tasks.register("clean", Delete) {
              delete rootProject.buildDir
          }
          EOF
      - name: Get Flutter packages
        script: |
          flutter packages pub get
      - name: Build Debug APK
        script: |
          flutter config --no-enable-web
          flutter build apk --debug --android-skip-build-dependency-validation
    artifacts:
      - build/**/outputs/apk/**/*.apk 